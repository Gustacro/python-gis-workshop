.. title:: Developing Geospatial software with Python
.. footer:: GFOSS Day, Foligno - 18/19 November 2010

==================================================
Developing Geospatial software with Python, Part 2
==================================================

-----------------------------------------------------------------------
Alessandro Pasotti (apasotti@gmail.com), Paolo Corti (pcorti@gmail.com)
-----------------------------------------------------------------------



Building blocks: WebServices
============================

Only a selection from an huge set:

.. class:: incremental

* OWS (OGC Web Services)
* GeoNames
* Google Maps
* Yahoo Maps

Building blocks: OGC Web Services
=================================

.. sidebar:: Libs

	* owslib (client)
	* mapnik (server)
	* mapscript (both)
	* qgis (both)



Open Geospatial Consortium defines the following standards for geospatial web services (OWS):

.. class:: incremental

* *WMS* (Web Map Service)
* *WFS* (Web Feature Service)
* *WCS* (Web Coverage Service)
* *CSW* (Catalogue Service for Web)
* *WPS* (Web Processing Service)
* many others...

KVP/XML requests

OGC Web Services: WMS
=====================

*Web Map Service* (WMS) is a standard protocol for serving georeferenced map images over the Internet that are generated by a map server using data (vector and cover) from a GIS database


.. graph :: images/wms.png

       digraph g {
                rankdir="LR"
                
                edge [fontcolor=red fontsize=9]
                node [shape=box style="rounded"]

                wmsc [label="WMS-client"]
                wmsc2 [label="WMS-client"]
                wmss [label="WMS-server" shape=box style=""]
                
                wmsc -> wmss [label="GetMap request"]
                wmss -> wmsc2 [label="image response"]

        }

OGC Web Services: WMS operations
================================

* *GetCapabilities* - returns parameters about the WMS and the available layers (*)
* *GetMap* - with parameters provided (srs, format, width, eight, bbox, layers...) returns a map image (*)
* *GetFeatureInfo* - with parameters provided returns feature informations (**)
* *DescribeLayer*
* *GetLegendGraphic*

(*) basic WMS
(**) queryable WMS

OGC Web Services: WMS GetMap operation
======================================


.. image:: images/duomo.jpg
	:align: right

main parameters: layers, styles, srs, bbox, width, height, format

sample GetMap operation (output is an image):

`<http://wms.pcn.minambiente.it/cgi-bin/mapserv.exe?map=/ms_ogc/service/ortofoto_colore_06_f32.map&layers=ortofoto_colore_06&styles=&srs=EPSG:32632&format=image/jpeg&request=GetMap&bgcolor=0xFFFFFF&height=300&width=300&version=1.1.1&bbox=514832,5034338,515032,5034548&exceptions=application/vnd.ogc.se_xml&transparent=FALSE>`_

OGC Web Services: WFS
=====================

*Web Feature Service* (WFS) provides a standard interface allowing requests for geographical features across the web using platform-independent calls

The WFS specification defines interfaces for describing data manipulation operations of geographic features. Data manipulation operations include the ability to:

.. class:: incremental

* Get or Query features based on spatial and non-spatial constraints (*)
* Create a new feature instance (WFS-T)
* Delete a feature instance (WFS-T)
* Update a feature instance (WFS-T)

OGC Web Services: WFS operations
================================

.. class:: incremental

* GetCapabilities (1)
* DescribeFeatureType (1)
* GetFeature (1)
* GetGmlObject (2)
* Transaction (3)
* LockFeature (3)

(1) basic WFS - read only
(2) XLink WFS
(3) transaction WFS (WFS-T)

OGC Web Services: WFS GetFeature operation
==========================================

main parameters: typeName, maxfeatures, query...

sample GetFeature operation (output is GML)

http://myserver/geoserver/wfs?request=GetFeature&version=1.0.0&typeName=layer1&maxfeatures=1

OGC Web Services: WCS
=====================

Web Coverage Service Interface Standard (WCS) provides an interface allowing requests for geographical coverages across the web using platform-independent calls

Operations:

* GetCapabilities
* DescribeCoverage
* GetCoverage

OGC Web Services: WCS GetCoverage operation
===========================================

main parameters: coverage, crs, bbox, time, width, height, resx, resy, format

GetCoverage operation (output is a coverage):

http://my.host.com/cgi-bin/mapserv?map=mywcs.map&SERVICE=wcs&VERSION=1.0.0&REQUEST=GetCoverage&coverage=bathymetry&CRS=EPSG:42304&BBOX=-2200000,-712631,3072800,3840000&WIDTH=3199&HEIGHT=2833&FORMAT=GTiff

Note: at least one time or bbox parameter is needed

OGC Web Services: CSW
=====================

Catalogue Service

* defines common interfaces to discover, browse, query and manage metadata about data, services, and other potential resources
* defines a query language (similar to the SQL "Where Clause") to be supported by all OGC Catalogue Interfaces in order to support search interoperability
* common queryable elements - request (subject, title, abstract, anytext (1), format, identifier, modified, type, boundingbox, CRS...)
* core returnable properties -response (title, creator, subject, description, publisher, contributor, date, type...)

Operations:

* GetCapabilities
* DescribeRecord
* GetDomain (*)
* GetRecords
* GetRecordById
* Transaction (*)
* Harvest

(*) optional implementations

OGC Web Services: CSW GetRecords operation
===========================================

main parameters: outputFormat (XML, text, html), maxRecords, SortBy, Constraint

GetRecords operation (output is XML):

http://www.someserver.com/csw/csw.cgi?request=GetRecords&version=2.0.2&outputFormat=application/xml&outputSchema=http://www.opengis.net/cat/cs
w/2.0.2&namespace=csw:http://www.opengis.org/cat/csw&ResponseHandler="mailto:pvretano@cubewerx.com"&typeName=csw:Record&elementSetName=brief&c
onstraintlanguage=CQLTEXT&constraint="csw:AnyText Like '%pollution%'"

OGC Web Services: WPS
=====================

Web Processing Server provides rules for standardizing how inputs and outputs (requests and responses) for geospatial processing services

.. sidebar:: Libs
	
	* pyWPS

	
Building blocks - Web Services: GeoNames
========================================

* a geographical database that covers all countries and contains over eight million placenames
* license: Creative Commons Attribution 3.0
* both a web application and a big set of web services

GeoNames: Web Services
======================

Most notably:

* geocoding
* reverse geocoding
* place hierarchy
* places from bounding box
* wikipedia search
* postal code search
* elevation

GeoNames: example of API use
============================

Regions of Italy:

http://ws.geonames.org/children?geonameId=3175395

Response:

.. sourcecode:: xml

    <geonames style="MEDIUM">
        <totalResultsCount>20</totalResultsCount>
        <geoname>
        <toponymName>Abruzzo</toponymName>
        <name>Abruzzo</name>
        <lat>42.25</lat>
        <lng>13.75</lng>
        ...

Building blocks - Web Services: Google Maps
===========================================

* google map embedding (javascript API)
* google map webservices
    * geocoding (and reverse geocoding)
    * directions
    * elevations
    * places

Google Maps: example of API use
===============================

A geocoding request example:

http://maps.googleapis.com/maps/api/geocode/xml?address=123+via+Oberdan+Foligno,+Italy&sensor=true

Response:


.. sourcecode:: xml

    <GeocodeResponse>
    <status>OK</status>
    <result>
    <type>street_address</type>
    <formatted_address>
    Via Guglielmo Oberdan, 123, 06034 Foligno Perugia, Italy
    </formatted_address>
    ...

Building blocks: QGIS
=====================

.. image:: images/qgis_logo.png
	:scale: 20%
	:align: right

QGIS (Quantum GIS) is a *C++ Qt* cross-platform GIS desktop application with vector editing 
capabilities and python scripting support.


.. class:: incremental

* python plugins (lot of)
* *standalone* python applications (headless or GUI)
* OGC WMS headless server


QGIS: standalone headless
=========================

	Loading a vector layer

.. sourcecode:: python

	>>> from qgis.gui import *
	>>> from qgis.core import *
	>>> QgsApplication.setPrefixPath("/usr", True)
	>>> QgsApplication.initQgis()
	>>> vlayer = QgsVectorLayer("regioni.shp", "regioni", "ogr")
	>>> vlayer.isValid()
	True



QGIS: standalone (render)
=========================

	Rendering

.. sourcecode:: python

	>>> QgsMapLayerRegistry.instance().addMapLayer(vlayer)
	<qgis.core.QgsVectorLayer object at 0x13be270>
	>>> from PyQt4.QtGui import *
	>>> from PyQt4.QtCore import *
	>>> img = QImage(QSize(800,600), QImage.Format_ARGB32_Premultiplied)
	>>> p = QPainter()
	>>> p.begin(img)
	True
	>>> p.setRenderHint(QPainter.Antialiasing)
	>>> render = QgsMapRenderer()
	>>> lst = [ vlayer.getLayerID() ]
	>>> render.setLayerSet(lst)
	>>> rect = QgsRectangle(render.fullExtent())
	>>> rect.scale(1.1)
	>>> render.setExtent(rect)
	>>> render.setOutputSize(img.size(), img.logicalDpiX())
	>>> img.size()
	PyQt4.QtCore.QSize(800, 600)
	>>> p.isActive()
	True
	>>> render.render(p)
	>>> p.end()
	True
	>>> img.save("render.png","png")
	True


QGIS: result
============

.. image :: images/render.png
	:scale: 80%


QGIS: standalone GUI
========================

.. sidebar:: Requires

	* *pyQt4*
	* *QtDesigner* (recommended)
	* GUI programming skills

.. graph:: images/qgis_qui_programming.png

	digraph g {
		node [shape=box style=rounded]
		
		"GUI design w. QtDesigner" -> "Connect GUI events w. python code"
	}



QGIS standalone GUI less is more
================================
	Minimal example: shapefile viewer

.. sourcecode:: python
	
	>>> from PyQt4 import QtGui, QtCore
	>>> import sys, os
	>>> from qgis import core, gui

	>>> core.QgsApplication.setPrefixPath('/usr', True)
	>>> core.QgsApplication.initQgis()
	>>> app = QtGui.QApplication(sys.argv)

	>>> l = core.QgsVectorLayer(sys.argv[1], os.path.basename(sys.argv[1]), 'ogr')
	>>> canvas = gui.QgsMapCanvas()
	>>> canvas.resize(800,600)
	>>> core.QgsMapLayerRegistry.instance().addMapLayer(l)
	>>> canvas.setExtent(l.extent())
	>>> cl = gui.QgsMapCanvasLayer(l)
	>>> canvas.setLayerSet([ cl ])
	>>> canvas.show()
	>>> retval = app.exec_()
	>>> core.QgsApplication.exitQgis()
	>>> sys.exit(retval)
		



QGIS: plugins
=============

	Powerful extensions to QGIS! Download from http://pyqgis.org

* start from a barebone plugin or use the `Plugin builder <http://www.dimitrisk.gr/qgis/creator/>`_
* create a GUI with *QtDesigner* 
* connect GUI events with QGIS code
* control QGIS application from python code
* see: QGIS APIs http://qgis.org/api/


Geopy
==========================

    Geopy (`<http://code.google.com/p/geopy/>`_) provides an interface to external **geocoding** and **reverse geocoding**  *webservices* 


Providers:

* Google Maps
* Yahoo! Maps
* Windows Local Live (Virtual Earth)
* geocoder.us
* GeoNames
* MediaWiki pages (with the GIS extension)
* Semantic MediaWiki pages


Geopy: installation and usage
==============================


.. sourcecode:: bash

    $ sudo easy_install geopy


.. sourcecode:: python

    >>> from geopy import geocoders
    >>> g = geocoders.Google()
    >>> g.geocode('via anelli 12, milano')
    (u'Via Luigi Anelli, 12, 20122 Milan, Italy', (45.452325000000002, 9.1927447999999998))
    >>> g.geocode('otherworld')
    GQueryError: No corresponding geographic location could be found for the specified location, possibly because the address is relatively new, or because it may be incorrect.


Geopy: risultati multipli
=========================

.. sourcecode:: python

    >>> g.geocode('xyz')
    ValueError: Didn't find exactly one placemark! (Found 6.)
    >>> for l in g.geocode('xyz', exactly_one=False):
    ...     l
    ...
    (u'S Xyz Rd, Pickford, MI 49774, USA', (46.118099999999998, -84.321274599999995))
    (u'XYZ Liquor, 295 US Highway 17 S, Bartow, FL 33830, USA', (27.895257999999998, -81.828790999999995))
    (u'XYZ Restaurant, 80 Seawall Rd, Southwest Harbor, ME 04679-4024, USA', (44.269646999999999, -68.322371000000004))
    (u'XYZ Trading, 7018 Harwin Dr, Houston, TX 77036-2114, USA', (29.718654999999998, -95.507260000000002))
    (u'Xyz Exterminating, PO Box 1643, Grand Island, NE 68802-1643, USA', (40.93, -98.340000000000003))
    (u'\uff38\uff39\uff3a\u6c34\u6ca2', (39.156194399999997, 141.1596222))


Geopy: reverse
==============

    **svn** version required

.. sourcecode:: bash

    $ svn checkout http://geopy.googlecode.com/svn/branches/reverse-geocode geopy
    $ cd geopy/
    $ sudo python setup.py install


.. sourcecode:: python

    >>> (loc, point) = g.geocode('via anelli 1, milano')
    >>> point
    (45.453902599999999, 9.1930519000000004)
    >>> g.reverse(point)
    (u'Via Luigi Anelli, 1, 20122 Milan, Italy',
    (45.453902599999999, 9.1930519000000004))


OWSLib
======

    OWSLib Makes WxS Suck Less.
    A library to consume OGC(TM) web services.

.. sidebar:: Depends on

    * lxml


=============== ==================================
Standard        Version(s)
=============== ==================================
OGC WMS         1.1.1
OGC WFS         1.0.0, 1.1.0
OGC WCS         1.0.0, 1.1.0
OGC WMC         1.1.0
OGC SOS         1.0.0 (not complete)
OGC CSW         2.0.2
OGC Filter      1.1.0
OGC OWS Common  1.0.0, 1.1.0, 2.0
NASA DIF        9.7
FGDC CSDGM      1998
ISO 19139       2003/2007
Dublin Core     1.1
=============== ==================================


OWSLib: installation and usage
==============================

.. sourcecode:: bash

    $ sudo easy_install OWSLib


.. sourcecode:: python

    >>> from owslib.wms import WebMapService
    >>> wms = WebMapService('http://wms.pcn.minambiente.it/cgi-bin/mapserv.exe?map=/ms_ogc/service/ortofoto_colore_06_f32.map', version='1.1.1')
    >>> list(wms.contents)
    ['ortofoto_colore_06', 'watermark']
    >>> wms.contents['ortofoto_colore_06']
    >>> wms['ortofoto_colore_06'].boundingBox
    (298457.0, 3914540.0, 1327000.0, 5239710.0, 'EPSG:32632')
    >>> wms['ortofoto_colore_06'].boundingBoxWGS84
    (6.3349900000000003,
    35.034300000000002,
    19.840800000000002,
    47.310899999999997)



OWSLib: usage
============================


.. sourcecode:: python

    >>> wms.getOperationByName('GetMap').formatOptions
    ['image/png',
    'image/gif',
    'image/png; mode=24bit',
    'image/jpeg',
    'image/wbmp',
    'image/tiff',
    'image/svg+xml']
    >>> img = wms.getmap( layers= ['ortofoto_colore_06'],  bbox = (514832, 5034338, 515032, 5034548), srs = 'EPSG:32632', size=(300, 300), format = 'image/jpeg')
    >>> img.geturl()
    'http://wms.pcn.minambiente.it/cgi-bin/mapserv.exe?map= ...'
    >>> outfile = open('duomo.jpg', 'wb')
    >>> outfile.write(img.read())
    >>> outfile.close()



OWSLib: result
=================

    .. image:: images/duomo.jpg



Mapnik
======


.. sourcecode:: python


    import mapnik
    m = mapnik.Map(600,300,"+proj=latlong +datum=WGS84")
    m.background = mapnik.Color('steelblue')
    s = mapnik.Style()
    r=mapnik.Rule()
    r.symbols.append(mapnik.PolygonSymbolizer(mapnik.Color('#f2eff9')))
    r.symbols.append(mapnik.LineSymbolizer(mapnik.Color('rgb(50%,50%,50%)'),0.1))
    s.rules.append(r)
    m.append_style('My Style',s)

Mapscript
=========
	Python bindings to **UMN MapServer** (*C*)

* complete bindings: full access to MapServer power
* not very *pythonic*
* http://mapserver.org/mapscript/

Installation:

.. sourcecode:: bash

	$ sudo apt-get install python-mapscript

Mapscript: usage
================

.. sidebar:: Hate

	I hate mapfiles ;)

.. sourcecode:: python

	import mapscript
	map = mapscript.mapObj(  )
	map.name = 'Test Map'
	map.setSize(300, 300)
	map.setExtent(-180.0,-90.0,180.0,90.0)
	map.imagecolor.setRGB(80, 180, 80)
	map.units = mapscript.MS_DD
	layer = mapscript.layerObj(map)
	layer.name = "regioni"
	layer.type = mapscript.MS_LAYER_POLYGON
	layer.status = mapscript.MS_DEFAULT
	layer.data =  'data/regioni'
	lass1 = mapscript.classObj(layer)
	class1.name = "Regioni"
	style = mapscript.styleObj(class1)
	style.outlinecolor.setRGB(100, 100, 100)
	style.color.setRGB(200, 200, 200)
	extent = layer.getExtent()
	map.setExtent(extent.minx, extent.miny, extent.maxx, extent.maxy)
	mapimage = map.draw()
	mapimage.save('images/mapscript_map.png')


MapScript: result
=================

.. image:: images/mapscript_map.png

pyWPS
=====


GRASS
=====


Links
==========

* QGIS
	* http://www.qgis.org/wiki/Python_Bindings
	* http://desktopgisbook.com/Creating_a_Standalone_GIS_Application_1
	* http://www.dimitrisk.gr/qgis/creator/

